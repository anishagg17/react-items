{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","newItem","list","addItem","ni","id","Math","random","value","nl","setState","updateItem","e","target","resetItems","resetItem","unl","filter","i","className","class","type","aria-describedby","placeholder","this","onChange","event","onClick","map","l","key","Button","variant","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAkGeA,G,iNA7FbC,MAAM,CACJC,QAAQ,GACPC,KAAK,I,EAERC,QAAS,WACP,IAAMC,EAAG,CACPC,GAAK,EAAEC,KAAKC,SACZC,MAAQ,EAAKR,MAAMC,SAEfQ,EAAG,GAAD,mBAAK,EAAKT,MAAME,MAAhB,CAAqBE,IAC7B,EAAKM,SAAS,CACZR,KAAOO,EACPR,QAAQ,M,EAGZU,WAAY,SAACC,GACX,EAAKF,SAAS,CACZT,QAAUW,EAAEC,OAAOL,S,EAGvBM,WAAY,WACV,EAAKJ,SAAS,CACZR,KAAK,M,EAGTa,UAAW,SAACV,GACV,IACMW,EADG,YAAI,EAAKhB,MAAME,MACTe,QAAQ,SAAAC,GAAC,OAAIA,EAAEb,KAAKA,KACnC,EAAKK,SAAS,CACZR,KAAOc,K,wEAGF,IAAD,OACN,OACE,yBAAKG,UAAU,OAEb,yBAAKC,MAAM,iDACX,yBAAKA,MAAM,2BAA2Bf,GAAG,0BACrC,wBAAIe,MAAM,sBACR,wBAAIA,MAAM,mBAAV,QACO,0BAAMA,MAAM,WAAZ,iBAOb,6BACA,yBAAKA,MAAM,oBACP,yBAAKA,MAAM,uBACT,0BAAMA,MAAM,mBAAmBf,GAAG,gBAAlC,oBAEF,2BAAOgB,KAAK,OAAOD,MAAM,eAAef,GAAG,YAAYiB,mBAAiB,eACtEC,YAAY,sBACZf,MAAOgB,KAAKxB,MAAMC,QAClBwB,SAAU,SAACC,GAAD,OAAS,EAAKf,WAAWe,MAErC,4BAAQN,MAAM,mBACZO,QAAS,kBAAI,EAAKxB,YADpB,UAKJ,wBAAIiB,MAAM,eACNI,KAAKxB,MAAME,KAAK0B,KAAM,SAACC,GAAD,OACtB,wBAAIT,MAAM,kBAAkBU,IAAKD,EAAExB,IAChCwB,EAAErB,MACH,4BACCmB,QAAS,kBAAM,EAAKZ,UAAUc,EAAExB,KAChCgB,KAAK,SAASD,MAAM,yBAFrB,eAMN,6BACA,kBAACW,EAAA,EAAD,CAAQC,QAAQ,UAAUL,QAAS,kBAAK,EAAKb,eAA7C,aAGA,6BA1CF,KA0CS,6BACP,0BAAMM,MAAM,8DACV,yBAAKA,MAAM,2BAA2Bf,GAAG,0BACrC,wBAAIe,MAAM,sBACR,wBAAIA,MAAM,mBAAV,oC,GAjFEa,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93a1d3d6.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport './App.css';\n\nclass App extends React.Component {\n  state={\n    newItem:\"\"\n    ,list:[]\n  }\n  addItem= () => {\n    const ni={\n      id : 1+Math.random() ,\n      value : this.state.newItem\n    }\n    const nl=[...this.state.list,ni]\n    this.setState({\n      list : nl,\n      newItem:\"\"\n    })\n  }\n  updateItem =(e)=>{\n    this.setState({\n      newItem : e.target.value \n    })\n  }\n  resetItems =() =>{\n    this.setState({\n      list:[]\n    })\n  }\n  resetItem =(id) =>{\n    const nl=[...this.state.list];\n    const unl = nl.filter( i => i.id!==id);\n    this.setState({\n      list : unl\n    });\n  } \n  render(){\n    return (\n      <div className=\"App\">\n\n        <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul class=\"navbar-nav mr-auto\">\n              <li class=\"nav-item active\">\n                Home <span class=\"sr-only\">(current)</span>\n              </li>\n              \n\n            </ul>\n        </div>\n        </nav>\n        <br/>\n        <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n              <span class=\"input-group-text\" id=\"basic-addon3\">Add an Item....</span>\n            </div>\n            <input type=\"text\" class=\"form-control\" id=\"basic-url\" aria-describedby=\"basic-addon3\"\n              placeholder=\"Enter new item here\"\n              value={this.state.newItem}\n              onChange={(event)=>this.updateItem(event)}\n            />\n            <button class=\"input-group-text\"  //type=\"button\" class=\"btn btn-secondary\"\n              onClick={()=>this.addItem()}\n            > ADD </button>\n        </div>\n\n        <ul class=\" list-group\">{\n            this.state.list.map(  (l) => \n            <li class=\"list-group-item\" key={l.id}>\n              {l.value}\n              <button \n               onClick={()=>  this.resetItem(l.id)}\n               type=\"button\" class=\"btn btn-outline-light\"\n               >DELETE</button>\n            </li>  )\n        }</ul>\n        <br/>\n        <Button variant=\"warning\" onClick={()=> this.resetItems()}>\n        Reset All \n        </Button>\n        <br/>  <br/>\n        <nav2 class=\"navbar navbar-expand-lg navbar-light bg-light fixed-bottom\">\n          <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n              <ul class=\"navbar-nav mr-auto\">\n                <li class=\"nav-item active\">\n                  Made By : Anish Aggarwal\n                </li>\n              </ul>\n          </div>\n        </nav2>\n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}